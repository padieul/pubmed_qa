version: "2.2"

# USEFUL! 
# https://www.elastic.co/guide/en/elasticsearch/reference/8.3/docker.html#docker-compose-file
# https://levelup.gitconnected.com/how-to-run-elasticsearch-8-on-docker-for-local-development-401fd3fff829


services:

  # setup:
  #   container_name: es_kibana_setup
  #   image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
  #   volumes:
  #     - certs:/usr/share/elasticsearch/config/certs
  #   user: "0"
  #   command: >
  #     bash -c '
  #       if [ x${ELASTIC_PASSWORD} == x ]; then
  #         echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
  #         exit 1;
  #       elif [ x${KIBANA_PASSWORD} == x ]; then
  #         echo "Set the KIBANA_PASSWORD environment variable in the .env file";
  #         exit 1;
  #       fi;
  #       if [ ! -f config/certs/ca.zip ]; then
  #         echo "Creating CA";
  #         bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
  #         unzip config/certs/ca.zip -d config/certs;
  #       fi;
  #       if [ ! -f config/certs/certs.zip ]; then
  #         echo "Creating certs";
  #         echo -ne \
  #         "instances:\n"\
  #         "  - name: es01\n"\
  #         "    dns:\n"\
  #         "      - es01\n"\
  #         "      - localhost\n"\
  #         "    ip:\n"\
  #         "      - 127.0.0.1\n"\
  #         > config/certs/instances.yml;
  #         bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
  #         unzip config/certs/certs.zip -d config/certs;
  #       fi;
  #       echo "Setting file permissions"
  #       chown -R root:root config/certs;
  #       find . -type d -exec chmod 750 \{\} \;;
  #       find . -type f -exec chmod 640 \{\} \;;
  #       echo "Waiting for Elasticsearch availability";
  #       until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
  #       echo "Setting kibana_system password";
  #       until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
  #       echo "All done!";
  #     '
  #   healthcheck:
  #     test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
  #     interval: 1s
  #     timeout: 5s
  #     retries: 120
  #   networks:
  #     - pubmedQANetwork



  es01: # service name (also used as host name)
    container_name: es01
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    env_file:
      - .env
    environment: # (see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/docker.html)
      - discovery.type=single-node # single-node cluster
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false # enable security/basic authentication
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}

      # required for the elasticvue UI (see https://elasticvue.com/usage)
      - http.cors.enabled=true
      - http.cors.allow-origin=http://localhost:8080
      - http.cors.allow-headers=X-Requested-With,Content-Type,Content-Length,Authorization
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock: # disables swapping (see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/docker.html)
        soft: -1
        hard: -1
    volumes:
      - esdata01:/usr/share/elasticsearch/data # persist elasticsearch data
      - certs:/usr/share/elasticsearch/config/certs
    ports:
      - 9200:9200 # make port 9200 accessible for the host
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - pubmedQANetwork

  elasticvue: # service name (also used as host name)
    container_name: elasticvue
    # to use it, port 9200 of es01 must be published
    image: cars10/elasticvue:0.42.1
    ports:
      - 8080:8080 # make port 8080 accessible for the host
    depends_on: ["es01"]
    networks:
      - pubmedQANetwork

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    ports:
      - ${KIBANA_PORT}:${KIBANA_PORT}
    depends_on: 
      - es01
        # condition: service_healthy
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=http://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
    networks:
      - pubmedQANetwork
    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120


  middleware:
    container_name: middleware
    build: # instead of an image, build the service from a dockerfile
      context: ./middleware # context for building
      dockerfile: Dockerfile
    environment:
      - API_DEBUG=1 # setting debug state
    env_file:
      - .env # for inserting the ES password
    ports:
      - 8000:8000 # main port
      - 5678:5678 # for remote debugger when DEBUG=1
    volumes:
      - ./middleware/app:/code/app # for code changes
      - ./models/data:/code/data
      - ./models/saved_models:/code/saved_models
    networks:
      - pubmedQANetwork

  # how to do block comment in yaml




  # frontend:
  #   container_name: frontend
  #   build:
  #     context: frontend/
  #     dockerfile: Dockerfile
  #   image: frontend
  #   volumes:
  #     - ./frontend:/usr/source/app
  #   ports:
  #     - 5000:5000
  #   depends_on: ["middleware"]
  #   networks:
  #     - pubmedQANetwork

  models:
    container_name: models
    build:
      context: models/
      dockerfile: Dockerfile
    image: models 
    networks:
      - pubmedQANetwork



volumes:
  certs:
    driver: local
  kibanadata:
    driver: local
  esdata01:
    driver: local

networks:
  pubmedQANetwork:
    driver: bridge






