version: "2.2"

# USEFUL! 
# https://www.elastic.co/guide/en/elasticsearch/reference/8.3/docker.html#docker-compose-file
# https://levelup.gitconnected.com/how-to-run-elasticsearch-8-on-docker-for-local-development-401fd3fff829


services:

  setup:
    container_name: es_kibana_setup
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120
    networks:
      - ytScannerNetwork


  middleware:
    container_name: middleware
    build: # instead of an image, build the service from a dockerfile
      context: ./middleware # context for building
      dockerfile: Dockerfile
    environment:
      - API_DEBUG=1 # setting debug state
    env_file:
      - .env # for inserting the ES password
    ports:
      - 8000:8000 # main port
      - 5678:5678 # for remote debugger when DEBUG=1
    volumes:
      - ./middleware/app:/code/app # for code changes
      - ./models/data:/code/data
      - ./models/saved_models:/code/saved_models
    networks:
      - ytScannerNetwork

  frontend:
    container_name: frontend
    build:
      context: frontend/
      dockerfile: Dockerfile
    image: frontend
    volumes:
      - ./frontend:/usr/source/app
    ports:
      - 5000:5000
    depends_on: ["middleware"]
    networks:
      - ytScannerNetwork

  models:
    container_name: models
    build:
      context: models/
      dockerfile: Dockerfile
    image: models 
    networks:
      - ytScannerNetwork



volumes:
  certs:
    driver: local
  kibanadata:
    driver: local
  esdata01:
    driver: local

networks:
  ytScannerNetwork:
    driver: bridge






